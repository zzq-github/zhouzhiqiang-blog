/*
Navicat MySQL Data Transfer

Source Server         : mytest
Source Server Version : 80015
Source Host           : localhost:3306
Source Database       : test

Target Server Type    : MYSQL
Target Server Version : 80015
File Encoding         : 65001

Date: 2019-11-29 15:18:39
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '文章id',
  `title` varchar(50) NOT NULL COMMENT '文章标题',
  `creattime` bigint(50) DEFAULT NULL COMMENT '文章创建时间',
  `author` varchar(20) DEFAULT NULL COMMENT '作者',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章内容',
  `introduce` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '文章简介',
  `classify` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '文章分类 0前端文章 1后端文章 2其他',
  `headimg` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章封面图',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('35', '安东尼上下半场的双面人生 只要服老他能自我救赎', '1574414176704', 'admin', '<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">看安东尼打雄鹿上半场，估计不少朋友会想：甜瓜退役吧，别再勉强自己了。他出手机会有限，却不服老，风格仍然是巨星球和英雄球，单打王本色没变。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">看完安东尼下半场比赛，又不得不感叹这名未来名人堂球员的篮球天赋，油箱里还有油。他给队友创造得分机会，在快攻中投中三分，防守时拼尽全力。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">上下半场的安东尼，是他的双面人生，或者说他人生的上下半场。上半场的他，是丹佛之王，纽约当家人，声望曾媲美詹姆斯。下半场的他拿着非保障合同，苦苦等来开拓者的机会。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">现在的安东尼，要有下半场的觉悟，不要再想做曾经那个孤胆英雄。人都会老，安东尼现在恰好老了，他需要服老。开拓者是利拉德和麦科勒姆的球队，安东尼只是一个辅佐者。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><img class=\"content-picture\" style=\"margin: 0.6em auto; padding: 0px; border: 0px none; vertical-align: middle; max-width: 100%; display: block;\" src=\"https://inews.gtimg.com/newsapp_bt/0/10816518497/1000\" /><em class=\"desc\" style=\"margin: 0px; padding: 0px; color: #9b9ea3; line-height: 20px; text-align: center; display: block; font-size: 14px;\">安东尼庆祝投中三分</em></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">英雄球和巨星球，安东尼还没有死心</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><img class=\"content-picture\" style=\"margin: 0.6em auto; padding: 0px; border: 0px none; vertical-align: middle; max-width: 100%; display: block;\" src=\"https://inews.gtimg.com/newsapp_match/0/10816462337/0\" /><em class=\"desc\" style=\"margin: 0px; padding: 0px; color: #9b9ea3; line-height: 20px; text-align: center; display: block; font-size: 14px;\">瓜哥单打被字母哥抢断</em></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">开拓者第一次进攻，安东尼就主动给自己叫了一个战术，为胡德做无球掩护，让胡德接球，自己沉到低位，获得一个和字母哥单挑的机会，胡德将球给了过去。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">这是安东尼习惯的位置，习惯的单打方式，年轻时的杀招，不知道靠这招得了多少分，赢得单打王的美誉。但这次安东尼持球推进过程中，直接被字母哥将球断掉。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼35岁，现在联盟打了17个赛季，已经老了，没有了曾经的速度、力量、爆发力、灵活性和反应速度，这种打法却还停留在过去，他们怎么继续留在NBA？</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">在开拓者之前，很多人球队不敢签安东尼，就是怕他这种单挑打法。看完这个球，哪怕是安东尼最忠实的球迷，估计也会长叹一声：&ldquo;瓜哥老了，确实老了，退役吧。&rdquo;</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼自己却没有这样的觉悟，谁愿意服老呢？他年轻时是媲美老詹的绝代双骄，高中大学时就享誉全美，进入NBA一度被官方力捧。现在老詹还拿着顶薪，安东尼肯定不服气的。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><img class=\"content-picture\" style=\"margin: 0.6em auto; padding: 0px; border: 0px none; vertical-align: middle; max-width: 100%; display: block;\" src=\"https://inews.gtimg.com/newsapp_match/0/10816467037/0\" /><em class=\"desc\" style=\"margin: 0px; padding: 0px; color: #9b9ea3; line-height: 20px; text-align: center; display: block; font-size: 14px;\">安东尼强行中投不中</em></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">这是安东尼本场比赛的第二次进攻，就是经过托利弗一个简单的挡拆掩护，拔起就是一个中投。且不说托利弗这个掩护质量如何蹩脚，瓜哥这次投篮选择真的合理吗？</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">开拓者现在是利拉德和麦科勒姆的球队，他们两个都拿着亿元合同，享有无限开火权。瓜哥只是一名拿着顶薪的老将，他无限单打的光辉岁月留在丹佛和纽约。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><img class=\"content-picture\" style=\"margin: 0.6em auto; padding: 0px; border: 0px none; vertical-align: middle; max-width: 100%; display: block;\" src=\"https://inews.gtimg.com/newsapp_match/0/10816472371/0\" /><em class=\"desc\" style=\"margin: 0px; padding: 0px; color: #9b9ea3; line-height: 20px; text-align: center; display: block; font-size: 14px;\">安东尼拒绝麦科勒姆掩护</em></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">或许安东尼还没有意识到这点，大家可以看看开拓者半场最后一攻。安东尼接到皮球时还有21秒时间，他运球到前场后，麦科勒姆本来想过来掩护，给安东尼制造一个错位机会或者自己接球打字母哥。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼直接摆手拒绝，示意要自己来，接着一直控球，等来托利弗的掩护，错位对上洛佩兹突破到内线，试图来一次暴扣，结果被字母哥和洛佩兹两个人将球摁下来。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><img class=\"content-picture\" style=\"margin: 0.6em auto; padding: 0px; border: 0px none; vertical-align: middle; max-width: 100%; display: block;\" src=\"https://inews.gtimg.com/newsapp_match/0/10816476443/0\" /><em class=\"desc\" style=\"margin: 0px; padding: 0px; color: #9b9ea3; line-height: 20px; text-align: center; display: block; font-size: 14px;\">安东尼突破被大洛和字母哥封盖</em></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">NBA有种潜规则，这种关键球一般是交给球队老大处理，安东尼内心深处，还是没有放下老大的架子。他拒绝麦科勒姆，选择了自己认为最合理的进攻方式，却被盖了，他其他几次突破也被防了下来。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">理想很丰满，现实很骨感。心气是一回事，实力又是一回事。安东尼心气还有，气质摆在那儿，但字母哥的抢断、大洛的盖帽已经告诉他，他不再是昔日那个超巨，不能再打英雄球和巨星球。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">这就是上半场的安东尼，老骥伏枥，志在千里，然后被千里之外的现实教育了。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">突然苏醒，安东尼下半场提升价值</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">看上半场的安东尼，真的很让人着急，这样打下去，被开拓者裁掉只是迟早的事情。安东尼却用下半场完成救赎，提升了自己对于开拓者的价值，打出比贝兹莫尔等人更好的表现，提升留队几率。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><span style=\"margin: 0px; padding: 0px; font-weight: bolder;\">他开始传球了</span></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><img class=\"content-picture\" style=\"margin: 0.6em auto; padding: 0px; border: 0px none; vertical-align: middle; max-width: 100%; display: block;\" src=\"https://inews.gtimg.com/newsapp_match/0/10816490391/0\" /><em class=\"desc\" style=\"margin: 0px; padding: 0px; color: #9b9ea3; line-height: 20px; text-align: center; display: block; font-size: 14px;\">安东尼助攻队友得分</em></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">像这个球，安东尼接球的时候，面对迪文森佐，这本来是一个大错位。按照他以前的习惯，多半就是停球面对推进，碾压对手后中投得分，这次选择了多传球一次，助攻底角的特伦斯投中三分。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼年轻时单打厉害，也被称作球权黑洞，就是这种球一到他手里就停滞了。本来队友有很好的空位机会，安东尼就是不传，他上半场就是球权黑洞，进攻合理性太差了。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">下半场安东尼愿意传出去，说明他还是有了一些觉悟，愿意做出一些改变。在完成这次助攻后，安东尼接下来不久又将球传给麦科勒姆，助攻麦科勒姆完成一次中投。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><span style=\"margin: 0px; padding: 0px; font-weight: bolder;\">他进攻合理了</span></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼进攻的时候，也不像上半场那样单打，高位拿着球就单打或者出手，或者拿着球就强冲内线，而是选择了更合理的进攻方式，愿意在开拓者战术体系内完成进攻。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><img class=\"content-picture\" style=\"margin: 0.6em auto; padding: 0px; border: 0px none; vertical-align: middle; max-width: 100%; display: block;\" src=\"https://inews.gtimg.com/newsapp_match/0/10815603608/0\" /><em class=\"desc\" style=\"margin: 0px; padding: 0px; color: #9b9ea3; line-height: 20px; text-align: center; display: block; font-size: 14px;\">安东尼快攻三分</em></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">像这个三分球，开拓者发动快攻，胡德推进过后，安东尼圈顶落位，得到一个空位机会，迎着字母哥拔起就是一个三分，帮助开拓者将分差缩小到10分以内。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼这个球哪怕没有投进，斯托茨教练也无话可说的。安东尼有这个能力，这是一个很好的空位机会，现在小球时代，这种追身三分本来就是潮流，没啥问题。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">这种快攻急停投（篮）三分能力，确实是安东尼的优势。安东尼的投篮姿势，一直是教科书一般，手感柔和得像丝绸，他有能力打好这种快攻和无球进攻。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">在开拓者这支球队里，有利拉德和麦科勒姆吸引防守，安东尼有大量的空位机会，他只需要把握住这种机会就好。35岁啦，要醒悟，要学学老卡特，要学会服老。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">卡特年轻时飞天遁地，4届全明星票王，乔丹接班人，猛龙当家球星，人送外号半人半神，何其风光。卡特这几年老了，就转型做投手，做扫地僧，42岁还签保障合同，在NBA打22年了。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><img class=\"content-picture\" style=\"margin: 0.6em auto; padding: 0px; border: 0px none; vertical-align: middle; max-width: 100%; display: block;\" src=\"https://inews.gtimg.com/newsapp_match/0/10816504379/0\" /><em class=\"desc\" style=\"margin: 0px; padding: 0px; color: #9b9ea3; line-height: 20px; text-align: center; display: block; font-size: 14px;\">安东尼错位单打马修斯得分</em></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">这是安东尼内线错位对上马修斯，要住位置过后，一个运球金鸡独立后仰跳投，球脆生生就进了，马修斯根本防不了。马修斯在后卫中算强壮的，但在安东尼面前，空气一般。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼还有一次高位面对洛佩兹，一次错位机会，做出一个投篮假动作后，直接突破到内线上篮得分。这是很好的2次错位机会，安东尼都把握住了，充分展示了自己的能力。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼现在确实老了，但他和詹姆斯一样，生涯没有受过大伤，现在又减重了，身体状态其实保持得非常不错。加上万花筒般的进攻技术，安东尼现在的进攻能力还是强于NBA大部分人。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">关键是安东尼的态度，愿不愿意放下巨星包袱，愿不愿意做角色球员。上半场他不愿意，9投3中打得很不好，下半场愿意，成为了开拓者的正面助力。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼今天在场上的时候，比贝兹莫尔、海佐尼亚、西蒙斯这些球员打得好，发挥了更大的作用，这增加了安东尼留在开拓者的机会，也增加了他重新证明自己的机会。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">贝兹莫尔名曰3D球员，却错失一些大空位机会，和安东尼确实没法比。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><span style=\"margin: 0px; padding: 0px; font-weight: bolder;\">安东尼还有很不错的身体状态</span></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><img class=\"content-picture\" style=\"margin: 0.6em auto; padding: 0px; border: 0px none; vertical-align: middle; max-width: 100%; display: block;\" src=\"https://inews.gtimg.com/newsapp_match/0/10816509249/0\" /><em class=\"desc\" style=\"margin: 0px; padding: 0px; color: #9b9ea3; line-height: 20px; text-align: center; display: block; font-size: 14px;\">安东尼对抗字母哥</em></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼身体状态这点，有必要拿出来再说下。今天比赛有一个场景，相信大部分球迷都印象深刻，就是安东尼从后场开始，就狂奔在字母哥身前，不惧字母哥冲撞，不惧对抗，拼命在篮下和他挤位置。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">在对抗和速度比拼中，安东尼居然不输给字母哥。字母哥是谁，现在身体素质最变态的妖孽，或许没有之一。安东尼能跟上字母哥的节奏，说明他还没有完全老去，油箱里还有油。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">怀疑和质疑，安东尼一直要面对</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\"><img class=\"content-picture\" style=\"margin: 0.6em auto; padding: 0px; border: 0px none; vertical-align: middle; max-width: 100%; display: block;\" src=\"https://inews.gtimg.com/newsapp_bt/0/10816524546/1000\" /><em class=\"desc\" style=\"margin: 0px; padding: 0px; color: #9b9ea3; line-height: 20px; text-align: center; display: block; font-size: 14px;\">安东尼持球突破</em></p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼加盟开拓者，老詹、韦德这些老兄弟就像过节，在社交媒体上大肆庆祝，但很多专业媒体人和经理人并不看好这笔签约，他们认为安东尼在开拓者不可能成功。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼第一场对阵鹈鹕确实打得不好，第二场对阵雄鹿打了半场好球。这还是在利拉德、怀特塞德等人休战的情况。等利拉德复出后，相信安东尼会得到更多有利的进攻机会。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">安东尼对阵雄鹿下半场的表现让人看到希望，但只是一个下半场而已。赛季还长，安东尼还有很长的路要走，需要一直面对质疑和怀疑，只希望他不要掉队。</p>\n<p class=\"one-p\" style=\"margin: 0px 0px 2em; padding: 0px; line-height: 2.2; overflow-wrap: break-word; word-wrap: break-word; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">（文/童心）</p>\n<div id=\"Status\" style=\"margin: 0px; padding: 0px; font-family: \'Microsoft Yahei\', Avenir, \'Segoe UI\', \'Hiragino Sans GB\', STHeiti, \'Microsoft Sans Serif\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 18px;\">\n<div class=\"article-status\" style=\"margin: 0px; padding: 20px 0px 50px;\" data-reactroot=\"\">\n<div style=\"margin: 0px; padding: 0px;\">&nbsp;</div>\n<div class=\"statement\" style=\"margin: 0px; padding: 23px 0px 6px; font-size: 12px; color: #bbbbbb; text-align: center;\">免责声明：本文来自腾讯新闻客户端自媒体，不代表腾讯网的观点和立场。</div>\n</div>\n</div>', '安东尼上下半场的双面人生 只要服老他能自我救赎', '2', 'http://zzqlyy.com/dfairy157441417200032.jpg');
INSERT INTO `article` VALUES ('36', 'ECMScript let 和 const 命令', '1574417036152', 'admin', '<h2 id=\"let-命令\" class=\"let-命令\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; font-size: 18px; border-top: 2px solid #666666; counter-increment: section 1; color: #333333; font-family: Verdana, Arial;\">let 命令</h2>\n<h3 id=\"基本用法\" class=\"基本用法\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">基本用法</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">ES6 新增了<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>命令，用来声明变量。它的用法类似于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>，但是所声明的变量，只在<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>命令所在的代码块内有效。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">10</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> b <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\na<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ReferenceError: a is not defined.\n</span>b<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 1\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码在代码块之中，分别用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>声明的变量报错，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>声明的变量返回了正确的值。这表明，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>声明的变量只在它所在的代码块有效。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">for</code>循环的计数器，就很合适使用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>命令。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">for</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> i <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> i <span class=\"token operator\" style=\"color: #f92672;\">&lt;</span> <span class=\"token number\" style=\"color: #ae81ff;\">10</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> i<span class=\"token operator\" style=\"color: #f92672;\">++</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ...\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\nconsole<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>i<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// ReferenceError: i is not defined\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，计数器<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>只在<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">for</code>循环体内有效，在循环体外引用就会报错。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">下面的代码如果使用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>，最后输出的是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">10</code>。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">for</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> i <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> i <span class=\"token operator\" style=\"color: #f92672;\">&lt;</span> <span class=\"token number\" style=\"color: #ae81ff;\">10</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> i<span class=\"token operator\" style=\"color: #f92672;\">++</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>i<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n    console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>i<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\na<span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">6</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 10\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>命令声明的，在全局范围内都有效，所以全局只有一个变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>。每一次循环，变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>的值都会发生改变，而循环内被赋给数组<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">a</code>的函数内部的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">console.log(i)</code>，里面的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>指向的就是全局的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>。也就是说，所有数组<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">a</code>的成员里面的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>，指向的都是同一个<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>，导致运行时输出的是最后一轮的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>的值，也就是 10。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">如果使用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>，声明的变量仅在块级作用域内有效，最后输出的是 6。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">for</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> i <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> i <span class=\"token operator\" style=\"color: #f92672;\">&lt;</span> <span class=\"token number\" style=\"color: #ae81ff;\">10</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> i<span class=\"token operator\" style=\"color: #f92672;\">++</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>i<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n    console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>i<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\na<span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">6</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 6\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>声明的，当前的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>只在本轮循环有效，所以每一次循环的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>其实都是一个新的变量，所以最后输出的是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">6</code>。你可能会问，如果每一轮循环的变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>时，就在上一轮循环的基础上进行计算。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">另外，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">for</code>循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">for</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> i <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> i <span class=\"token operator\" style=\"color: #f92672;\">&lt;</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> i<span class=\"token operator\" style=\"color: #f92672;\">++</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> i <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'abc\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>i<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// abc\n</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// abc\n</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// abc\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码正确运行，输出了 3 次<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">abc</code>。这表明函数内部的变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>与循环变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>不在同一个作用域，有各自单独的作用域。</p>\n<h3 id=\"不存在变量提升\" class=\"不存在变量提升\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">不存在变量提升</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>命令会发生&ldquo;变量提升&rdquo;现象，即变量可以在声明之前使用，值为<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">为了纠正这种现象，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// var 的情况\n</span>console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 输出undefined\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> foo <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// let 的情况\n</span>console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 报错ReferenceError\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> bar <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>命令声明，会发生变量提升，即脚本开始运行时，变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>已经存在了，但是没有值，所以会输出<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>。变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">bar</code>用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>命令声明，不会发生变量提升。这表示在声明它之前，变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">bar</code>是不存在的，这时如果用到它，就会抛出一个错误。</p>\n<h3 id=\"暂时性死区\" class=\"暂时性死区\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">暂时性死区</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">只要块级作用域内存在<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>命令，它所声明的变量就&ldquo;绑定&rdquo;（binding）这个区域，不再受外部的影响。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> tmp <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">123</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\n<span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  tmp <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'abc\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ReferenceError\n</span>  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> tmp<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，存在全局变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">tmp</code>，但是块级作用域内<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>又声明了一个局部变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">tmp</code>，导致后者绑定这个块级作用域，所以在<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>声明变量前，对<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">tmp</code>赋值会报错。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">ES6 明确规定，如果区块中存在<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">总之，在代码块内，使用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为&ldquo;暂时性死区&rdquo;（temporal dead zone，简称 TDZ）。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // TDZ开始\n</span>  tmp <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'abc\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ReferenceError\n</span>  console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>tmp<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ReferenceError\n</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> tmp<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // TDZ结束\n</span>  console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>tmp<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // undefined\n</span>\n  tmp <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">123</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>tmp<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 123\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，在<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>命令声明变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">tmp</code>之前，都属于变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">tmp</code>的&ldquo;死区&rdquo;。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">&ldquo;暂时性死区&rdquo;也意味着<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">typeof</code>不再是一个百分之百安全的操作。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">typeof</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ReferenceError\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>使用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>命令声明，所以在声明之前，都属于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>的&ldquo;死区&rdquo;，只要用到该变量就会报错。因此，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">typeof</code>运行时就会抛出一个<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">ReferenceError</code>。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">作为比较，如果一个变量根本没有被声明，使用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">typeof</code>反而不会报错。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">typeof</span> undeclared_variable<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"undefined\"\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undeclared_variable</code>是一个不存在的变量名，结果返回&ldquo;undefined&rdquo;。所以，在没有<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>之前，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">typeof</code>运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">有些&ldquo;死区&rdquo;比较隐蔽，不太容易发现。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n<span class=\"token function\">bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 报错\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，调用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">bar</code>函数之所以报错（某些实现可能不报错），是因为参数<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>默认值等于另一个参数<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">y</code>，而此时<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">y</code>还没有声明，属于&ldquo;死区&rdquo;。如果<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">y</code>的默认值是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>，就不会报错，因为此时<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>已经声明了。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token function\">bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // [2, 2]\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">另外，下面的代码也会报错，与<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>的行为不同。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 不报错\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> x <span class=\"token operator\" style=\"color: #f92672;\">=</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 报错\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> x <span class=\"token operator\" style=\"color: #f92672;\">=</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// ReferenceError: x is not defined\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码报错，也是因为暂时性死区。使用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>声明变量时，只要变量在还没有声明完成前使用，就会报错。上面这行就属于这个情况，在变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>的声明语句还没有执行完成前，就去取<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>的值，导致报错&rdquo;x 未定义&ldquo;。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">ES6 规定暂时性死区和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>、<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5 是很常见的，现在有了这种规定，避免此类错误就很容易了。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p>\n<h3 id=\"不允许重复声明\" class=\"不允许重复声明\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">不允许重复声明</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>不允许在相同作用域内，重复声明同一个变量。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 报错\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">func<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">10</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 报错\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">func<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">10</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">因此，不能在函数内部重新声明参数。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">func<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>arg<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> arg<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token function\">func<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 报错\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">func<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>arg<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n    <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> arg<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token function\">func<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 不报错\n</span></code></pre>\n<h2 id=\"块级作用域\" class=\"块级作用域\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; font-size: 18px; border-top: 2px solid #666666; counter-increment: section 1; color: #333333; font-family: Verdana, Arial;\">块级作用域</h2>\n<h3 id=\"为什么需要块级作用域？\" class=\"为什么需要块级作用域？\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">为什么需要块级作用域？</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">第一种场景，内层变量可能会覆盖外层变量。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> tmp <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\n<span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>tmp<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">false</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n    <span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> tmp <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'hello world\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n<span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // undefined\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码的原意是，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">if</code>代码块的外部使用外层的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">tmp</code>变量，内部使用内层的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">tmp</code>变量。但是，函数<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">f</code>执行后，输出结果为<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>，原因在于变量提升，导致内层的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">tmp</code>变量覆盖了外层的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">tmp</code>变量。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">第二种场景，用来计数的循环变量泄露为全局变量。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> s <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'hello\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\n<span class=\"token keyword\" style=\"color: #66d9ef;\">for</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> i <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> i <span class=\"token operator\" style=\"color: #f92672;\">&lt;</span> s<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>length<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> i<span class=\"token operator\" style=\"color: #f92672;\">++</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>s<span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>i<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\nconsole<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>i<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 5\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">i</code>只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p>\n<h3 id=\"ES6-的块级作用域\" class=\"ES6-的块级作用域\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">ES6 的块级作用域</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>实际上为 JavaScript 新增了块级作用域。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f1<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> n <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">5</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n    <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> n <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">10</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 5\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面的函数有两个代码块，都声明了变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">n</code>，运行后输出 5。这表示外层代码块不受内层代码块的影响。如果两次都使用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>定义变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">n</code>，最后输出的值才是 10。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">ES6 允许块级作用域的任意嵌套。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> insane <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'Hello World\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>insane<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 报错\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码使用了一个五层的块级作用域，每一层都是一个单独的作用域。第四层作用域无法读取第五层作用域的内部变量。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">内层作用域可以定义外层作用域的同名变量。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> insane <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'Hello World\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> insane <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'Hello World\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">块级作用域的出现，实际上使得获得广泛应用的匿名立即执行函数表达式（匿名 IIFE）不再必要了。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// IIFE 写法\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> tmp <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 块级作用域写法\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> tmp <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<h3 id=\"块级作用域与函数声明\" class=\"块级作用域与函数声明\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">块级作用域与函数声明</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">函数能不能在块级作用域之中声明？这是一个相当令人混淆的问题。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 情况一\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 情况二\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">try</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">catch</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>e<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ...\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面两种函数声明，根据 ES5 的规定都是非法的。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此上面两种情况实际都能运行，不会报错。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>，在块级作用域之外不可引用。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token string\" style=\"color: #a6e22e;\">\'I am outside!\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">false</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n   <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 重复声明一次函数f\n</span>    <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token string\" style=\"color: #a6e22e;\">\'I am inside!\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n  <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码在 ES5 中运行，会得到&ldquo;I am inside!&rdquo;，因为在<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">if</code>内声明的函数<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">f</code>会被提升到函数头部，实际运行的代码如下。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// ES5 环境\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token string\" style=\"color: #a6e22e;\">\'I am outside!\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token string\" style=\"color: #a6e22e;\">\'I am inside!\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">false</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">ES6 就完全不一样了，理论上会得到&ldquo;I am outside!&rdquo;。因为块级作用域内声明的函数类似于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>，对作用域之外没有影响。但是，如果你真的在 ES6 浏览器中运行一下上面的代码，是会报错的，这是为什么呢？</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 浏览器的 ES6 环境\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token string\" style=\"color: #a6e22e;\">\'I am outside!\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">false</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n   <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 重复声明一次函数f\n</span>    <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token string\" style=\"color: #a6e22e;\">\'I am inside!\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n  <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// Uncaught TypeError: f is not a function\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面的代码在 ES6 浏览器中，都会报错。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">原来，如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大影响。为了减轻因此产生的不兼容问题，ES6 在<a style=\"background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; color: #4682be; text-decoration-line: none;\" href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-block-level-function-declarations-web-legacy-compatibility-semantics\">附录 B</a>里面规定，浏览器的实现可以不遵守上面的规定，有自己的<a style=\"background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; color: #4682be; text-decoration-line: none;\" href=\"http://stackoverflow.com/questions/31419897/what-are-the-precise-semantics-of-block-level-functions-in-es6\">行为方式</a>。</p>\n<ul style=\"list-style-type: none; padding-top: 0.5rem; padding-bottom: 0.5rem; color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">\n<li style=\"text-indent: -5px; font-size: 0.8rem;\">允许在块级作用域内声明函数。</li>\n<li style=\"text-indent: -5px; font-size: 0.8rem;\">函数声明类似于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>，即会提升到全局作用域或函数作用域的头部。</li>\n<li style=\"text-indent: -5px; font-size: 0.8rem;\">同时，函数声明还会提升到所在的块级作用域的头部。</li>\n</ul>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">注意，上面三条规则只对 ES6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>处理。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">根据这三条规则，浏览器的 ES6 环境中，块级作用域内声明的函数，行为类似于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>声明的变量。上面的例子实际运行的代码如下。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 浏览器的 ES6 环境\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token string\" style=\"color: #a6e22e;\">\'I am outside!\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> f <span class=\"token operator\" style=\"color: #f92672;\">=</span> undefined<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">false</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n    <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token string\" style=\"color: #a6e22e;\">\'I am inside!\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n  <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// Uncaught TypeError: f is not a function\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 块级作用域内部的函数声明语句，建议不要使用\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'secret\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n    <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 块级作用域内部，优先使用函数表达式\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'secret\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> f <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n    <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">另外，还有一个需要注意的地方。ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 第一种写法，报错\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 第二种写法，不报错\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，第一种写法没有大括号，所以不存在块级作用域，而<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>只能出现在当前作用域的顶层，所以报错。第二种写法有大括号，所以块级作用域成立。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">函数声明也是如此，严格模式下，函数只能声明在当前作用域的顶层。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 不报错\n</span><span class=\"token string\" style=\"color: #a6e22e;\">\'use strict\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 报错\n</span><span class=\"token string\" style=\"color: #a6e22e;\">\'use strict\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<h2 id=\"const-命令\" class=\"const-命令\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; font-size: 18px; border-top: 2px solid #666666; counter-increment: section 1; color: #333333; font-family: Verdana, Arial;\">const 命令</h2>\n<h3 id=\"基本用法\" class=\"基本用法\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">基本用法</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\">const PI <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">3.1415</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nPI<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 3.1415\n</span>\nPI <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// TypeError: Assignment to constant variable.\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码表明改变常量的值会报错。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>声明的变量不得改变值，这意味着，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\">const foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// SyntaxError: Missing initializer in const declaration\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码表示，对于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>来说，只声明不赋值，就会报错。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>的作用域与<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>命令相同：只在声明所在的块级作用域内有效。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  const MAX <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">5</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\nMAX<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // Uncaught ReferenceError: MAX is not defined\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>MAX<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ReferenceError\n</span>  const MAX <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">5</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码在常量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">MAX</code>声明之前就调用，结果报错。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>声明的常量，也与<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>一样不可重复声明。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> message <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\"Hello!\"</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> age <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">25</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 以下两行都会报错\n</span>const message <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\"Goodbye!\"</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nconst age <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">30</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<h3 id=\"本质\" class=\"本质\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">本质</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\">const foo <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 为 foo 添加一个属性，可以成功\n</span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>prop <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">123</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nfoo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>prop<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 123\n</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 将 foo 指向另一个对象，就会报错\n</span>foo <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // TypeError: \"foo\" is read-only\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，常量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">下面是另一个例子。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\">const a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\na<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">push<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token string\" style=\"color: #a6e22e;\">\'Hello\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 可执行\n</span>a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>length <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>   <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 可执行\n</span>a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token string\" style=\"color: #a6e22e;\">\'Dave\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>   <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 报错\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，常量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">a</code>是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">a</code>，就会报错。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">如果真的想将对象冻结，应该使用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">Object.freeze</code>方法。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\">const foo <span class=\"token operator\" style=\"color: #f92672;\">=</span> Object<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">freeze<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 常规模式时，下面一行不起作用；\n</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 严格模式时，该行会报错\n</span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>prop <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">123</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，常量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> constantize <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>obj<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span><span class=\"token operator\" style=\"color: #f92672;\">&gt;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  Object<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">freeze<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>obj<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  Object<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">keys<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>obj<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">forEach<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>key<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> i<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span><span class=\"token operator\" style=\"color: #f92672;\">&gt;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n    <span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">typeof</span> obj<span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>key<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">===</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'object\'</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n      <span class=\"token function\">constantize<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span> obj<span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>key<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n    <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<h3 id=\"ES6-声明变量的六种方法\" class=\"ES6-声明变量的六种方法\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">ES6 声明变量的六种方法</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">ES5 只有两种声明变量的方法：<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>命令和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">function</code>命令。ES6 除了添加<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>命令，后面章节还会提到，另外两种声明变量的方法：<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">import</code>命令和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">class</code>命令。所以，ES6 一共有 6 种声明变量的方法。</p>\n<h2 id=\"顶层对象的属性\" class=\"顶层对象的属性\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; font-size: 18px; border-top: 2px solid #666666; counter-increment: section 1; color: #333333; font-family: Verdana, Arial;\">顶层对象的属性</h2>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">顶层对象，在浏览器环境指的是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">window</code>对象，在 Node 指的是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">global</code>对象。ES5 之中，顶层对象的属性与全局变量是等价的。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\">window<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\na<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 1\n</span>\na <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nwindow<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>a<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 2\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，顶层对象的属性赋值与全局变量的赋值，是同一件事。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。这样的设计带来了几个很大的问题，首先是没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）；其次，程序员很容易不知不觉地就创建了全局变量（比如打字出错）；最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">window</code>对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">ES6 为了改变这一点，一方面规定，为了保持兼容性，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>命令和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">function</code>命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>命令、<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">const</code>命令、<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">class</code>命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 如果在 Node 的 REPL 环境，可以写成 global.a\n</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 或者采用通用方法，写成 this.a\n</span>window<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>a<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 1\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> b <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nwindow<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>b<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // undefined\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，全局变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">a</code>由<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var</code>命令声明，所以它是顶层对象的属性；全局变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">b</code>由<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">let</code>命令声明，所以它不是顶层对象的属性，返回<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>。</p>\n<h2 id=\"globalThis-对象\" class=\"globalThis-对象\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; font-size: 18px; border-top: 2px solid #666666; counter-increment: section 1; color: #333333; font-family: Verdana, Arial;\">globalThis 对象</h2>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。</p>\n<ul style=\"list-style-type: none; padding-top: 0.5rem; padding-bottom: 0.5rem; color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">\n<li style=\"text-indent: -5px; font-size: 0.8rem;\">浏览器里面，顶层对象是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">window</code>，但 Node 和 Web Worker 没有<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">window</code>。</li>\n<li style=\"text-indent: -5px; font-size: 0.8rem;\">浏览器和 Web Worker 里面，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">self</code>也指向顶层对象，但是 Node 没有<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">self</code>。</li>\n<li style=\"text-indent: -5px; font-size: 0.8rem;\">Node 里面，顶层对象是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">global</code>，但其他环境都不支持。</li>\n</ul>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">this</code>变量，但是有局限性。</p>\n<ul style=\"list-style-type: none; padding-top: 0.5rem; padding-bottom: 0.5rem; color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">\n<li style=\"text-indent: -5px; font-size: 0.8rem;\">全局环境中，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">this</code>会返回顶层对象。但是，Node 模块和 ES6 模块中，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">this</code>返回的是当前模块。</li>\n<li style=\"text-indent: -5px; font-size: 0.8rem;\">函数里面的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">this</code>，如果函数不是作为对象的方法运行，而是单纯作为函数运行，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">this</code>会指向顶层对象。但是，严格模式下，这时<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">this</code>会返回<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>。</li>\n<li style=\"text-indent: -5px; font-size: 0.8rem;\">不管是严格模式，还是普通模式，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">new Function(\'return this\')()</code>，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">eval</code>、<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">new Function</code>这些方法都可能无法使用。</li>\n</ul>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 方法一\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">typeof</span> window <span class=\"token operator\" style=\"color: #f92672;\">!</span><span class=\"token operator\" style=\"color: #f92672;\">==</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'undefined\'</span>\n   <span class=\"token operator\" style=\"color: #f92672;\">?</span> window\n   <span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">typeof</span> process <span class=\"token operator\" style=\"color: #f92672;\">===</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'object\'</span> <span class=\"token operator\" style=\"color: #f92672;\">&amp;&amp;</span>\n      <span class=\"token keyword\" style=\"color: #66d9ef;\">typeof</span> require <span class=\"token operator\" style=\"color: #f92672;\">===</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'function\'</span> <span class=\"token operator\" style=\"color: #f92672;\">&amp;&amp;</span>\n      <span class=\"token keyword\" style=\"color: #66d9ef;\">typeof</span> global <span class=\"token operator\" style=\"color: #f92672;\">===</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'object\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span>\n     <span class=\"token operator\" style=\"color: #f92672;\">?</span> global\n     <span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">this</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 方法二\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> getGlobal <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">typeof</span> self <span class=\"token operator\" style=\"color: #f92672;\">!</span><span class=\"token operator\" style=\"color: #f92672;\">==</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'undefined\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> self<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">typeof</span> window <span class=\"token operator\" style=\"color: #f92672;\">!</span><span class=\"token operator\" style=\"color: #f92672;\">==</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'undefined\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> window<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">typeof</span> global <span class=\"token operator\" style=\"color: #f92672;\">!</span><span class=\"token operator\" style=\"color: #f92672;\">==</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'undefined\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> global<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">throw</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token string\" style=\"color: #a6e22e;\">\'unable to locate global object\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">现在有一个<a style=\"background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; color: #4682be; text-decoration-line: none;\" href=\"https://github.com/tc39/proposal-global\">提案</a>，在语言标准的层面，引入<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">globalThis</code>作为顶层对象。也就是说，任何环境下，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">globalThis</code>都是存在的，都可以从它拿到顶层对象，指向全局环境下的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">this</code>。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">垫片库<a style=\"background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; color: #4682be; text-decoration-line: none;\" href=\"https://github.com/ungap/global-this\"><code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">global-this</code></a>模拟了这个提案，可以在所有环境拿到<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">globalThis</code>。</p>', 'ECMScript let 和 const 命令', '0', 'http://zzqlyy.com/dfairy157441668000049.jpg');
INSERT INTO `article` VALUES ('37', '变量的解构赋值', '1574417218625', 'admin', '<h2 id=\"数组的解构赋值\" class=\"数组的解构赋值\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; font-size: 18px; border-top: 2px solid #666666; counter-increment: section 1; color: #333333; font-family: Verdana, Arial;\">数组的解构赋值</h2>\n<h3 id=\"基本用法\" class=\"基本用法\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">基本用法</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">以前，为变量赋值，只能直接指定值。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> b <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> c <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">ES6 允许写成下面这样。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> b<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> c<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">本质上，这种写法属于&ldquo;模式匹配&rdquo;，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> baz<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nfoo<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 1\n</span>bar<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 2\n</span>baz<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 3\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> third<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token string\" style=\"color: #a6e22e;\">\"foo\"</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token string\" style=\"color: #a6e22e;\">\"bar\"</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token string\" style=\"color: #a6e22e;\">\"baz\"</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nthird<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"baz\"\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nx<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 1\n</span>y<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 3\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>head<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>tail<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">4</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nhead<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 1\n</span>tail<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // [2, 3, 4]\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>z<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token string\" style=\"color: #a6e22e;\">\'a\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nx<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"a\"\n</span>y<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // undefined\n</span>z<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // []\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">如果解构不成功，变量的值就等于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">以上两种情况都属于解构不成功，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>的值都会等于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nx<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 1\n</span>y<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 2\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>b<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> d<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">4</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\na<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 1\n</span>b<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 2\n</span>d<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 4\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面两个例子，都属于不完全解构，但是可以成功。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 报错\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token boolean\" style=\"color: #ae81ff;\">false</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">NaN</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> undefined<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">null</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">对于 Set 结构，也可以使用数组的解构赋值。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> z<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token string\" style=\"color: #a6e22e;\">\'a\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'b\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'c\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nx<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"a\"\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span><span class=\"token operator\" style=\"color: #f92672;\">*</span> <span class=\"token function\">fibs<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> a <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> b <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">while</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n    yield a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n    <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> b<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>b<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> a <span class=\"token operator\" style=\"color: #f92672;\">+</span> b<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>first<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> second<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> third<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> fourth<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> fifth<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> sixth<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token function\">fibs<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nsixth<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 5\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">fibs</code>是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</p>\n<h3 id=\"默认值\" class=\"默认值\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">默认值</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">解构赋值允许指定默认值。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>foo <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nfoo<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // true\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'b\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token string\" style=\"color: #a6e22e;\">\'a\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // x=\'a\', y=\'b\'\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'b\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token string\" style=\"color: #a6e22e;\">\'a\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> undefined<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // x=\'a\', y=\'b\'\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">注意，ES6 内部使用严格相等运算符（<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>，默认值才会生效。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>undefined<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nx<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 1\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token keyword\" style=\"color: #66d9ef;\">null</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nx<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // null\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，如果一个数组成员是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">null</code>，默认值就不会生效，因为<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">null</code>不严格等于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token string\" style=\"color: #a6e22e;\">\'aaa\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，因为<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>能取到值，所以函数<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">f</code>根本不会执行。上面的代码其实等价于下面的代码。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">if</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">===</span> undefined<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">else</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>    <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // x=1; y=1\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>   <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // x=2; y=2\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // x=1; y=2\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>    <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ReferenceError: y is not defined\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面最后一个表达式之所以会报错，是因为<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">y</code>做默认值时，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">y</code>还没有声明。</p>\n<h2 id=\"对象的解构赋值\" class=\"对象的解构赋值\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; font-size: 18px; border-top: 2px solid #666666; counter-increment: section 1; color: #333333; font-family: Verdana, Arial;\">对象的解构赋值</h2>\n<h3 id=\"简介\" class=\"简介\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">简介</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">解构不仅可以用于数组，还可以用于对象。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> bar <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'aaa\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'bbb\'</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nfoo<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"aaa\"\n</span>bar<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"bbb\"\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> foo <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'aaa\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'bbb\'</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nfoo<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"aaa\"\n</span>bar<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"bbb\"\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> baz <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'aaa\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'bbb\'</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nbaz<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // undefined\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">如果解构失败，变量的值等于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'baz\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nfoo<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // undefined\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，等号右边的对象没有<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>属性，所以变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>取不到值，所以等于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 例一\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> sin<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> cos <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> Math<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 例二\n</span>const <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> log <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token string\" style=\"color: #a6e22e;\">\'hello\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // hello\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码的例一将<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">Math</code>对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。例二将<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">console.log</code>赋值到<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">log</code>变量。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">如果变量名与属性名不一致，必须写成下面这样。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> baz <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'aaa\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'bbb\'</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nbaz<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"aaa\"\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> obj <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> first<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'hello\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> last<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'world\'</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> first<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> last<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> l <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> obj<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nf<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \'hello\'\n</span>l<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \'world\'\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> bar <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'aaa\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'bbb\'</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> baz <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'aaa\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'bbb\'</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nbaz<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"aaa\"\n</span>foo<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // error: foo is not defined\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>是匹配的模式，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">baz</code>才是变量。真正被赋值的是变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">baz</code>，而不是模式<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">与数组一样，解构也可以用于嵌套结构的对象。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> obj <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  p<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>\n    <span class=\"token string\" style=\"color: #a6e22e;\">\'Hello\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>\n    <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'World\'</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> p<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> y <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> obj<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nx<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"Hello\"\n</span>y<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"World\"\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">注意，这时<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">p</code>是模式，不是变量，因此不会被赋值。如果<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">p</code>也要作为变量赋值，可以写成下面这样。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> obj <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  p<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>\n    <span class=\"token string\" style=\"color: #a6e22e;\">\'Hello\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>\n    <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'World\'</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> p<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> p<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> y <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> obj<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nx<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"Hello\"\n</span>y<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"World\"\n</span>p<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // [\"Hello\", {y: \"World\"}]\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">下面是另一个例子。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\">const node <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  loc<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n    start<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n      line<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>\n      column<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">5</span>\n    <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> loc<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> loc<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> start <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> loc<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> start<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> line <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> node<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nline<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 1\n</span>loc <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // Object {start: Object}\n</span>start<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // Object {line: 1, column: 5}\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码有三次解构赋值，分别是对<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">loc</code>、<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">start</code>、<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">line</code>三个属性的解构赋值。注意，最后一次对<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">line</code>属性的解构赋值之中，只有<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">line</code>是变量，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">loc</code>和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">start</code>都是模式，不是变量。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">下面是嵌套赋值的例子。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> obj <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> arr <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> obj<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>prop<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> arr<span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">123</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token boolean\" style=\"color: #ae81ff;\">true</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\nobj<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // {prop:123}\n</span>arr<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // [true]\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 报错\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>baz<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'baz\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，等号左边对象的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>属性，对应一个子对象。该子对象的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">bar</code>属性，解构时会报错。原因很简单，因为<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>这时等于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>，再取子属性就会报错。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">注意，对象的解构赋值可以取到继承的属性。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\">const obj1 <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nconst obj2 <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'bar\'</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nObject<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">setPrototypeOf<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>obj1<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> obj2<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\nconst <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> obj1<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nfoo<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"bar\"\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，对象<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">obj1</code>的原型对象是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">obj2</code>。<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">foo</code>属性不是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">obj1</code>自身的属性，而是继承自<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">obj2</code>的属性，解构赋值可以取到这个属性。</p>\n<h3 id=\"默认值\" class=\"默认值\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">默认值</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">对象的解构也可以指定默认值。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nx<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 3\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">5</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nx<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 1\n</span>y<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 5\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\ny<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 3\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">5</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\ny<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 5\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> message<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> msg <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'Something went wrong\'</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nmsg<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"Something went wrong\"\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">默认值生效的条件是，对象的属性值严格等于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> undefined<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nx<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 3\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">var</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">null</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nx<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // null\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，属性<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>等于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">null</code>，因为<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">null</code>与<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>不严格相等，所以是个有效的赋值，导致默认值<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">3</code>不会生效。</p>\n<h3 id=\"注意点\" class=\"注意点\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">注意点</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 错误的写法\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// SyntaxError: syntax error\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码的写法会报错，因为 JavaScript 引擎会将<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">{x}</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 正确的写法\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">（2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token boolean\" style=\"color: #ae81ff;\">false</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'abc\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">（3）由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> arr <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token number\" style=\"color: #ae81ff;\">0</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> first<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>arr<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>length <span class=\"token operator\" style=\"color: #f92672;\">-</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> last<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> arr<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nfirst<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 1\n</span>last<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 3\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码对数组进行对象解构。数组<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">arr</code>的<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">0</code>键对应的值是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">1</code>，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">[arr.length - 1]</code>就是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">2</code>键，对应的值是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">3</code>。方括号这种写法，属于&ldquo;属性名表达式&rdquo;（参见《对象的扩展》一章）。</p>\n<h2 id=\"字符串的解构赋值\" class=\"字符串的解构赋值\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; font-size: 18px; border-top: 2px solid #666666; counter-increment: section 1; color: #333333; font-family: Verdana, Arial;\">字符串的解构赋值</h2>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\">const <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> b<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> c<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> d<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> e<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'hello\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\na<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"h\"\n</span>b<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"e\"\n</span>c<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"l\"\n</span>d<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"l\"\n</span>e<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // \"o\"\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">类似数组的对象都有一个<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">length</code>属性，因此还可以对这个属性解构赋值。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>length <span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> len<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'hello\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nlen<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 5\n</span></code></pre>\n<h2 id=\"数值和布尔值的解构赋值\" class=\"数值和布尔值的解构赋值\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; font-size: 18px; border-top: 2px solid #666666; counter-increment: section 1; color: #333333; font-family: Verdana, Arial;\">数值和布尔值的解构赋值</h2>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>toString<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> s<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">123</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\ns <span class=\"token operator\" style=\"color: #f92672;\">===</span> Number<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>prototype<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>toString<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // true\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>toString<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> s<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\ns <span class=\"token operator\" style=\"color: #f92672;\">===</span> Boolean<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>prototype<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>toString<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // true\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，数值和布尔值的包装对象都有<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">toString</code>属性，因此变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">s</code>都能取到值。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> prop<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> x <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> undefined<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // TypeError\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> prop<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> y <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">null</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // TypeError\n</span></code></pre>\n<h2 id=\"函数参数的解构赋值\" class=\"函数参数的解构赋值\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; font-size: 18px; border-top: 2px solid #666666; counter-increment: section 1; color: #333333; font-family: Verdana, Arial;\">函数参数的解构赋值</h2>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">函数的参数也可以使用解构赋值。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">add<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> x <span class=\"token operator\" style=\"color: #f92672;\">+</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n<span class=\"token function\">add<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 3\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，函数<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">y</code>。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">下面是另一个例子。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">4</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">map<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> b<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span><span class=\"token operator\" style=\"color: #f92672;\">&gt;</span> a <span class=\"token operator\" style=\"color: #f92672;\">+</span> b<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// [ 3, 7 ]\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">函数参数的解构也可以使用默认值。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">move<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n<span class=\"token function\">move<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">8</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // [3, 8]\n</span><span class=\"token function\">move<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // [3, 0]\n</span><span class=\"token function\">move<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // [0, 0]\n</span><span class=\"token function\">move<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // [0, 0]\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码中，函数<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">move</code>的参数是一个对象，通过对这个对象进行解构，得到变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">y</code>的值。如果解构失败，<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">y</code>等于默认值。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">注意，下面的写法会得到不一样的结果。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">move<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">0</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">0</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n\n<span class=\"token function\">move<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">8</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // [3, 8]\n</span><span class=\"token function\">move<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // [3, undefined]\n</span><span class=\"token function\">move<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // [undefined, undefined]\n</span><span class=\"token function\">move<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // [0, 0]\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码是为函数<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">move</code>的参数指定默认值，而不是为变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">y</code>指定默认值，所以会得到与前一种写法不同的结果。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">undefined</code>就会触发函数参数的默认值。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> undefined<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">map<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'yes\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span><span class=\"token operator\" style=\"color: #f92672;\">&gt;</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// [ 1, \'yes\', 3 ]\n</span></code></pre>\n<h2 id=\"圆括号问题\" class=\"圆括号问题\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; font-size: 18px; border-top: 2px solid #666666; counter-increment: section 1; color: #333333; font-family: Verdana, Arial;\">圆括号问题</h2>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>\n<h3 id=\"不能使用圆括号的情况\" class=\"不能使用圆括号的情况\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">不能使用圆括号的情况</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">以下三种解构赋值不得使用圆括号。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">（1）变量声明语句</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 全部报错\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>c<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> c<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> c<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> c<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> o<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> p<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> p <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> o<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> p<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">（2）函数参数</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">函数参数也属于变量声明，因此不能带有圆括号。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 报错\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>z<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> z<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 报错\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>z<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">（3）赋值语句的模式</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 全部报错\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> p<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> a <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> p<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">42</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">5</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码将整个模式放在圆括号之中，导致报错。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 报错\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> p<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> a <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> c <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码将一部分模式放在圆括号之中，导致报错。</p>\n<h3 id=\"可以使用圆括号的情况\" class=\"可以使用圆括号的情况\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">可以使用圆括号的情况</h3>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>b<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 正确\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> p<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>d<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 正确\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>parseInt<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>prop<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // 正确\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">p</code>，而不是<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">d</code>；第三行语句与第一行语句的性质一致。</p>\n<h2 id=\"用途\" class=\"用途\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; font-size: 18px; border-top: 2px solid #666666; counter-increment: section 1; color: #333333; font-family: Verdana, Arial;\">用途</h2>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">变量的解构赋值用途很多。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><strong>（1）交换变量的值</strong></p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> x <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> y <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码交换变量<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">x</code>和<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><strong>（2）从函数返回多个值</strong></p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 返回一个数组\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">example<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>a<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> b<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> c<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token function\">example<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 返回一个对象\n</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">example<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  <span class=\"token keyword\" style=\"color: #66d9ef;\">return</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n    foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>\n    bar<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span>\n  <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> foo<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> bar <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token function\">example<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><strong>（3）函数参数的定义</strong></p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 参数是一组有次序的值\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> z<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 参数是一组无次序的值\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> z<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token function\">f<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>z<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">3</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> y<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">2</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> x<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">1</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><strong>（4）提取 JSON 数据</strong></p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> jsonData <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  id<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token number\" style=\"color: #ae81ff;\">42</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>\n  status<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token string\" style=\"color: #a6e22e;\">\"OK\"</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>\n  data<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token number\" style=\"color: #ae81ff;\">867</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token number\" style=\"color: #ae81ff;\">5309</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\n<span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> id<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> status<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> data<span class=\"token punctuation\" style=\"color: #f8f8f2;\">:</span> number <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> jsonData<span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\nconsole<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>id<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> status<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> number<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 42, \"OK\", [867, 5309]\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">上面代码可以快速提取 JSON 数据的值。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><strong>（5）函数参数的默认值</strong></p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\">jQuery<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span>ajax <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span>url<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  async <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>\n  beforeSend <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>\n  cache <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>\n  complete <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">function</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>\n  crossDomain <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token boolean\" style=\"color: #ae81ff;\">false</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>\n  global <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token boolean\" style=\"color: #ae81ff;\">true</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>\n <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ... more config\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ... do stuff\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">指定参数的默认值，就避免了在函数体内部再写<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">var foo = config.foo || \'default foo\';</code>这样的语句。</p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><strong>（6）遍历 Map 结构</strong></p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">任何部署了 Iterator 接口的对象，都可以用<code style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #c7254e; background: #f9f2f4; border-radius: 2px; padding-left: 3px; padding-right: 3px;\">for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\">const map <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token keyword\" style=\"color: #66d9ef;\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nmap<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token keyword\" style=\"color: #66d9ef;\">set</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token string\" style=\"color: #a6e22e;\">\'first\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'hello\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\nmap<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token keyword\" style=\"color: #66d9ef;\">set</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token string\" style=\"color: #a6e22e;\">\'second\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> <span class=\"token string\" style=\"color: #a6e22e;\">\'world\'</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n\n<span class=\"token keyword\" style=\"color: #66d9ef;\">for</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>key<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> value<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> of map<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n  console<span class=\"token punctuation\" style=\"color: #f8f8f2;\">.</span><span class=\"token function\">log<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span>key <span class=\"token operator\" style=\"color: #f92672;\">+</span> <span class=\"token string\" style=\"color: #a6e22e;\">\" is \"</span> <span class=\"token operator\" style=\"color: #f92672;\">+</span> value<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n<span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// first is hello\n</span><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// second is world\n</span></code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\"><span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">// 获取键名\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">for</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span>key<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> of map<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ...\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n<span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\">\n// 获取键值\n</span><span class=\"token keyword\" style=\"color: #66d9ef;\">for</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span><span class=\"token keyword\" style=\"color: #66d9ef;\">let</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">[</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span>value<span class=\"token punctuation\" style=\"color: #f8f8f2;\">]</span> of map<span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span> <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span>\n <span class=\"token comment\" style=\"color: #75715e;\" spellcheck=\"true\"> // ...\n</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span>\n</code></pre>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\"><strong>（7）输入模块的指定方法</strong></p>\n<p style=\"color: #333333; font-family: Verdana, Arial; font-size: 15.36px;\">加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<pre class=\" language-javascript\" style=\"font-family: Consolas, Monaco, \'Andale Mono\', monospace; font-size: 15.36px; color: #ffffff; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-spacing: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 0.7rem; margin-right: auto; margin-left: auto; border-radius: 5px; background-position: initial; background-color: #111111; line-height: 1.2;\"><code class=\" language-javascript\" style=\"font-family: Consolas, \'Courier New\', Courier, FreeMono, monospace; font-size: 0.7rem; color: #a6e22e; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; background: #111111; border-radius: 2px;\">const <span class=\"token punctuation\" style=\"color: #f8f8f2;\">{</span> SourceMapConsumer<span class=\"token punctuation\" style=\"color: #f8f8f2;\">,</span> SourceNode <span class=\"token punctuation\" style=\"color: #f8f8f2;\">}</span> <span class=\"token operator\" style=\"color: #f92672;\">=</span> <span class=\"token function\">require<span class=\"token punctuation\" style=\"color: #f8f8f2;\">(</span></span><span class=\"token string\" style=\"color: #a6e22e;\">\"source-map\"</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">)</span><span class=\"token punctuation\" style=\"color: #f8f8f2;\">;</span>\n</code></pre>\n<h3 id=\"留言\" class=\"留言\" style=\"margin-top: 50px; margin-bottom: 0px; padding-top: 20px; padding-bottom: 0px; border-top: 1px dotted #777777; color: #333333; font-family: Verdana, Arial;\">留言</h3>', '变量的解构赋值', '0', 'http://zzqlyy.com/dfairy157441719400056.jpg');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `articleid` int(11) NOT NULL COMMENT '文章id',
  `visitor` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '评论者姓名',
  `email` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '评论者邮箱',
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci COMMENT '评论内容',
  `commentid` int(11) NOT NULL AUTO_INCREMENT COMMENT '评论id',
  `commenttime` bigint(50) DEFAULT NULL COMMENT '评论时间',
  PRIMARY KEY (`commentid`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('32', '周志强', '15096061897@163.com', '测试评论', '5', '1557300327267');
INSERT INTO `comment` VALUES ('32', '周志强', '15096061897@163.com', '测试评论', '6', '1557300327267');
INSERT INTO `comment` VALUES ('32', '11111111', '1111111@163.com', '11111111111111', '7', '1557301605328');
INSERT INTO `comment` VALUES ('31', 'zzq', '15096061897@163.com', '测试评论', '8', '1557368280953');
INSERT INTO `comment` VALUES ('31', '111', '111@163.com', '我是评论', '9', '1557368346848');
INSERT INTO `comment` VALUES ('31', 'zzq', '150@163.com', '测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论测试评论', '10', '1557371665707');
INSERT INTO `comment` VALUES ('31', '不讲道理柯里昂', '15096061897@163.com', '我是评论', '11', '1557373615689');
INSERT INTO `comment` VALUES ('35', '不讲道理的柯里昂', '150960618997@163.com', '甜瓜邮箱里还是有油的，这点毋庸置疑。', '12', '1574415382600');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `userid` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户id',
  `username` varchar(40) NOT NULL COMMENT '用户名称',
  `password` varchar(40) NOT NULL COMMENT '用户密码',
  PRIMARY KEY (`userid`)
) ENGINE=InnoDB AUTO_INCREMENT=35 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('31', 'admin', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `user` VALUES ('33', '不讲道理的柯里昂', 'ca484aef25c2718cf9753b9c772a9328');
INSERT INTO `user` VALUES ('34', 'xk', '3895667a28647af49c3394e603a94aa5');
